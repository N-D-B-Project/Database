// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id                 String               @id
  Name               String
  Settings           GuildSettings?
  GuildReactionRoles GuildReactionRoles[]
  Tickets            Tickets[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  databaseVersion    String               @default("API")

  @@map("Guild")
}

model GuildSettings {
  id         String       @id @default(uuid())
  ReactionDM Boolean      @default(true)
  Premium    Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  tickets    TicketType[]
  guild      Guild        @relation(fields: [guildId], references: [id])
  guildId    String       @unique
}

model GuildReactionRoles {
  id        String   @id @default(uuid())
  Message   String
  Channel   String
  Role      String
  Emoji     String
  Option    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  guild     Guild    @relation(fields: [guildId], references: [id])
  guildId   String
}

model Tickets {
  id           String             @id @default(uuid())
  userId       String?
  guildId      String?
  ticketTypeId String
  status       GuildTicketsStatus @default(OPEN)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now())
  User         User?              @relation(fields: [userId], references: [id])
  Guild        Guild?             @relation(fields: [guildId], references: [id])
  TicketType   TicketType         @relation(fields: [ticketTypeId], references: [id])
}

enum GuildTicketsStatus {
  OPEN
  CLOSED
}

model TicketType {
  id              String         @id @default(uuid())
  name            String         @db.VarChar(25)
  description     String         @db.VarChar(256)
  message         String         @db.Text()
  emoji           String
  Tickets         Tickets[]
  GuildSettings   GuildSettings? @relation(fields: [guildSettingsId], references: [id])
  guildSettingsId String?
}

model User {
  id              String        @id
  Settings        UserSettings?
  APIUser         APIUser?
  Tickets         Tickets[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  databaseVersion String        @default("API")

  @@map("User")
}

model UserSettings {
  id        String   @id @default(uuid())
  Premium   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model APIUser {
  id          String @id @default(uuid())
  email       String
  accessToken String
  user        User   @relation(fields: [userId], references: [id])
  userId      String @unique
}
